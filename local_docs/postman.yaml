openapi: "3.0.0"
servers:
  - url: "http://localhost:3080"
    description: ""
    variables: {}
  - url: "http://localhost:3030"
    description: ""
    variables: {}
info:
  version: "a05fcba9-23e4-491e-9a17-bee25a4f0a52"
  title: "OdooDB API "
  description: "An API that provides endpoints to perform CRUD and other basic ecommerce activities"
  termsOfService: ""
  contact: {}
  license:
    name: ""
paths:
  /api/pos/71302/checkout:
    post:
      summary: "Checkout POS order"
      description: "To make payment and checkout for the order whose ID is in the request url"
      operationId: "CheckoutPOSorder"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      requestBody:
        description: "To make payment and checkout for the order whose ID is in the request url"
        required: true
        content:
          text/plain:
            schema:
              type: "string"
              example:
                amount_paid: 45
            example: "{\r\n    \"amount_paid\": 45\r\n}"
      tags:
        - "POS Order"
  /api/pos/myOrders/55:
    get:
      summary: "Get all user orders!"
      description: "To get a user's order history, by passing ID as url parameter"
      operationId: "Getalluserorders!"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      tags:
        - "POS Order"
  /api/pos/order:
    post:
      summary: "Make new Pos order"
      description: "User Endpoint to create a new POS order!"
      operationId: "MakenewPosorder"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      requestBody:
        description: "User Endpoint to create a new POS order!"
        required: true
        content:
          text/plain:
            schema:
              type: "string"
              example:
                name: "Order bournvitar jar"
                user_id: 55
                session_id: 4257
                partner_id: 1
                amount_total: 45
            example: "{\r\n    \"name\": \"Order bournvitar jar\",\r\n    \"user_id\": 55,\r\n    \"session_id\": 4257,\r\n    \"partner_id\": 1,\r\n    \"amount_total\": 45\r\n}"
      tags:
        - "POS Order"
  /api/orders/sale/:
    post:
      summary: "Create a new sale order"
      description: "Endpoint to allow a supplier create a sale order"
      operationId: "Createanewsaleorder"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      requestBody:
        description: "Endpoint to allow a supplier create a sale order"
        required: true
        content:
          text/plain:
            schema:
              type: "string"
              example:
                user_id: 55
                name: "Super Packet of stickers sale"
                partner_id: 1
                order_id: 6796
            example: "{\r\n      \"user_id\": 55,\r\n      \"name\": \"Super Packet of stickers sale\",\r\n      \"partner_id\": 1,\r\n      \"order_id\": 6796\r\n    }"
      tags:
        - "Sale Order"
  /api/orders/sale/92598:
    get:
      summary: "Get a single sale order"
      description: "Get a sale order by it's id"
      operationId: "Getasinglesaleorder"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      tags:
        - "Sale Order"
    delete:
      summary: "Delete single sale order"
      description: "To delete a sale order by its id(in this case id: 92598)"
      operationId: "Deletesinglesaleorder"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      tags:
        - "Sale Order"
  /api/orders/purchase/55/create:
    post:
      summary: "Create a new purchase order"
      description: "To allow a customer create a purchase order"
      operationId: "Createanewpurchaseorder"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      requestBody:
        description: "To allow a customer create a purchase order"
        required: true
        content:
          text/plain:
            schema:
              type: "string"
              example:
                name: "Pack of stickers purchase"
                partner_id: 1
                amount_total: 56.5
                product_id: 1
            example: "{\r\n    \"name\": \"Pack of stickers purchase\",\r\n    \"partner_id\": 1,\r\n    \"amount_total\": 56.50,\r\n    \"product_id\": 1\r\n}    "
      tags:
        - "Purchase Order"
  /api/orders/purchase/6795/show:
    get:
      summary: "Get a single purchase order"
      description: "Get a purchase order by it's id"
      operationId: "Getasinglepurchaseorder"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      tags:
        - "Purchase Order"
  /api/customers/login:
    post:
      summary: "Customer Login"
      description: "Request endpoint to Login a customer!"
      operationId: "CustomerLogin"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      requestBody:
        description: "Request endpoint to Login a customer!"
        required: true
        content:
          text/plain:
            schema:
              type: "string"
              example:
                login: "stark@odoo.com"
                password: "Password123"
            example: "{\r\n    \"login\": \"stark@odoo.com\",\r\n    \"password\": \"Password123\"\r\n}"
      tags:
        - "Customers API"
  /api/customers/55:
    get:
      summary: "Get single customer"
      description: "Request to get a single customer by passing ID as request parameter"
      operationId: "Getsinglecustomer"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      tags:
        - "Customers API"
    put:
      summary: "Update customer"
      description: "Endpoint To update a customer's profile, ID passed as request parameter and updates as request body"
      operationId: "Updatecustomer"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      requestBody:
        description: "Endpoint To update a customer's profile, ID passed as request parameter and updates as request body"
        required: true
        content:
          text/plain:
            schema:
              type: "string"
              example:
                name: "Timi Stark"
            example: "{\r\n    \"name\": \"Timi Stark\"\r\n}"
      tags:
        - "Customers API"
  /api/customers/signup:
    post:
      summary: "Customer signup"
      description: "Customer Signup endpoint. Creates a new customer account!"
      operationId: "Customersignup"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      requestBody:
        description: "Customer Signup endpoint. Creates a new customer account!"
        required: true
        content:
          text/plain:
            schema:
              type: "string"
              example:
                firstname: "Tim"
                lastname: "Stark"
                login: "stark@odoo.com"
                password: "password123"
            example: "{\r\n    \"firstname\": \"Tim\",\r\n    \"lastname\": \"Stark\",\r\n    \"login\": \"stark@odoo.com\",\r\n    \"password\": \"password123\"\r\n}"
      tags:
        - "Customers API"
  /api/customers/48:
    delete:
      summary: "Delete Customer"
      description: "API endpoint to delete a customer, by passing ID as request parameter"
      operationId: "DeleteCustomer"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      tags:
        - "Customers API"
  /api/products/:
    get:
      summary: "Get all products"
      description: "To return all products in the DB"
      operationId: "Getallproducts"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      tags:
        - "Products API"
    post:
      summary: "Create new product"
      description: "API endpoint to create a new product!"
      operationId: "Createnewproduct"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      requestBody:
        description: "API endpoint to create a new product!"
        required: true
        content:
          text/plain:
            schema:
              type: "string"
              example:
                name: "product1"
                type: "consu"
                categ_id: 3
                price: 4.5
                uom_id: 3
                uom_po_id: 4
            example: "{\r\n     \"name\": \"product1\",\r\n      \"type\": \"consu\",\r\n      \"categ_id\": 3,\r\n      \"price\": 4.5,\r\n      \"uom_id\": 3,\r\n      \"uom_po_id\": 4\r\n}"
      tags:
        - "Products API"
  /api/products/89535:
    put:
      summary: "Update Product"
      description: "Request to update properties of a product. Product id here: 89535"
      operationId: "UpdateProduct"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      requestBody:
        description: "Request to update properties of a product. Product id here: 89535"
        required: true
        content:
          text/plain:
            schema:
              type: "string"
              example:
                name: "Bournvitary"
                type: "consu"
                categ_id: 3
                price: 48.5
                uom_id: 3
                uom_po_id: 4
            example: "{\r\n     \"name\": \"Bournvitary\",\r\n      \"type\": \"consu\",\r\n      \"categ_id\": 3,\r\n      \"price\": 48.5,\r\n      \"uom_id\": 3,\r\n      \"uom_po_id\": 4\r\n}"
      tags:
        - "Products API"
    get:
      summary: "Get a single product"
      description: "Request to get a single product by it's ID; ID passed as request parameter"
      operationId: "Getasingleproduct"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      tags:
        - "Products API"
    delete:
      summary: "Delete a product"
      description: "Request to delete a single product, by passing it's ID as request parameter."
      operationId: "Deleteaproduct"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      tags:
        - "Products API"
  /api/products/categories/3:
    get:
      summary: "Get products that belong to a category"
      description: "Request to get all products that belong to a category. Category ID passed as request parameter.\r\n"
      operationId: "Getproductsthatbelongtoacategory"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      tags:
        - "Products API"
  /api/products/categories/create:
    post:
      summary: "Create new product category"
      description: "Endpoint to add a new category of products to the records"
      operationId: "Createnewproductcategory"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      requestBody:
        description: "Endpoint to add a new category of products to the records"
        required: true
        content:
          text/plain:
            schema:
              type: "string"
              example:
                name: "Gadgets and electronics"
            example: "{\r\n     \"name\": \"Gadgets and electronics\"\r\n}"
      tags:
        - "Products API"
  /api/products/search:
    post:
      summary: "Search for products"
      description: "Request to search for products using keywords in the products name "
      operationId: "Searchforproducts"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      requestBody:
        description: "Request to search for products using keywords in the products name "
        required: true
        content:
          text/plain:
            schema:
              type: "string"
              example:
                name: "Bournvi"
            example: "{\r\n    \"name\": \"Bournvi\"\r\n}"
      tags:
        - "Products API"
  /api/products/filter:
    post:
      summary: "Search for products by filters passed as request query"
      operationId: "Searchforproductsbyfilterspassedasrequestquery"
      parameters:
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: ""
          headers: {}
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: "string"
              example:
                name: "Bournvi"
            example: "{\r\n    \"name\": \"Bournvi\"\r\n}"
      tags:
        - "Products API"
  /api/products/88555/related:
    get:
      summary: "Get products that are related to a product"
      operationId: "Getproductsthatarerelatedtoaproduct"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      tags:
        - "Products API"
  /api/products/6744/reviews:
    get:
      summary: "Get product reviews"
      description: "API endpoint to return all rating and reviews of a particular product."
      operationId: "Getproductreviews"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      tags:
        - "Products API"
  /api/transactions/113810:
    get:
      summary: "Get a transaction by it's ID"
      description: "Get a transaction by id(e.g id: 113810)"
      operationId: "Getatransactionbyit'sID"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      tags:
        - "Transactions API"
  /api/transactions/:
    get:
      summary: "Get all transactions"
      description: "get all Transactions that have ever been made"
      operationId: "Getalltransactions"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      tags:
        - "Transactions API"
  /api/transactions/partners/846:
    get:
      summary: "Get user transactions by his ID"
      description: "Get all transactions made by a customer/supplier... partner id here: 856"
      operationId: "GetusertransactionsbyhisID"
      parameters: []
      responses:
        200:
          description: ""
          headers: {}
      tags:
        - "Transactions API"
components:
  parameters:
    name:
      name: "name"
      in: "query"
      required: true
      style: "form"
      schema:
        type: "string"
        example: "Bournvitary"
    id:
      name: "id"
      in: "query"
      required: true
      style: "form"
      schema:
        type: "number"
security: []
tags: []
externalDocs:
  url: ""
  description: ""
warnings: []
